import numpy as np
from scipy.linalg import schur

""""
u=np.array([[ 1.93913034e+00, -2.84288622e-01,  1.88131427e-01],
       [-1.44543012e+00, -3.33844323e-01,  1.28477418e+00],
       [-9.12122452e-01, -1.54997518e+00, -1.22695640e+00],
       [-1.18432652e+00,  4.38587127e-01,  6.73170414e-01],
       [ 1.77346856e-01, -2.08121513e+00,  1.29275268e+00],
       [ 2.62678740e-01, -1.25312020e+00,  9.38693454e-01],
       [-3.00260375e-01,  3.81729336e-01,  8.68012730e-01],
       [ 4.92583466e-01,  1.64029456e+00, -1.50868063e+00],
       [-1.21577131e+00,  8.56276850e-01,  1.01735663e+00],
       [ 8.77766264e-01,  8.56255993e-01,  1.34571021e+00],
       [ 4.91657997e-01, -3.52979974e-01,  5.10766475e-01],
       [ 1.57952125e+00, -5.36825755e-01, -7.90638591e-01],
       [ 3.02864637e-01, -6.25790266e-01, -6.24937037e-01],
       [-1.94112526e+00,  8.08684719e-01,  6.12968864e-01],
       [ 6.40300409e-01,  4.89827573e-01, -2.44404117e-01],
       [ 2.46281478e-02,  1.10762256e+00,  9.80856591e-01],
       [ 6.95091791e-01,  1.88490528e+00,  4.02859542e-02],
       [-2.61439300e-01,  7.06802455e-01,  9.44648149e-02],
       [-2.57060762e+00, -3.55613618e-01,  1.08807447e+00],
       [-8.47736227e-01, -1.91714914e-01, -2.79674552e+00],
       [-4.90204519e-01,  1.59374074e+00, -7.73865094e-01],
       [-5.08406723e-01, -2.68716437e+00,  6.47747097e-01],
       [-1.54597299e+00,  2.05952726e+00, -6.83696760e-01],
       [-6.37755253e-01, -8.94177737e-01, -1.37600058e+00],
       [ 1.45844753e+00, -6.10687293e-01, -2.31268026e-01],
       [ 1.48872784e-01, -7.14829110e-01,  1.56682043e-01],
       [-1.67194361e-01,  1.00473149e+00, -6.19964997e-01],
       [-1.36744017e+00,  1.22161068e-01, -1.16118860e+00],
       [-1.33916649e+00, -3.01645765e-01, -1.25417656e+00],
       [ 4.89660994e-01, -7.84982043e-01,  5.49218758e-01],
       [-6.96907553e-01, -1.48538310e+00, -3.87812565e-01],
       [-8.06610786e-01,  2.81842879e-01,  3.11379844e-01],
       [-1.23483992e+00,  1.13848729e+00, -3.00741342e-03],
       [-1.16580170e+00, -1.06160339e-01, -1.17702888e+00],
       [-4.40192934e-01,  9.21860414e-01, -9.51354136e-01],
       [ 1.59406484e+00, -2.67771876e-01, -2.11919074e+00],
       [ 8.33555960e-01,  6.16399595e-01, -5.67514947e-01],
       [ 6.23843899e-01, -5.79358957e-02,  1.12428467e+00],
       [ 1.08246997e+00,  7.07013288e-01,  7.02482252e-01],
       [-7.34121095e-01,  2.33789945e-01,  2.08873089e-01],
       [-2.91154861e-01, -1.00952546e+00, -6.93384722e-01],
       [-2.92280256e+00,  8.32968229e-01, -6.28066446e-01],
       [-4.36968295e-01, -3.16376121e-01,  1.59099266e+00],
       [ 1.13487494e+00,  1.44823325e+00, -3.70121330e-01],
       [-6.09255177e-01,  1.70944954e+00,  1.09169563e+00],
       [-9.07662682e-01,  2.13968347e+00,  1.32422646e+00],
       [ 7.88705899e-01, -1.32892844e+00,  6.88370920e-02],
       [-5.34539271e-02,  1.81464108e+00,  1.09699250e+00],
       [-3.95192531e-01, -7.57242627e-01, -3.19541241e-01],
       [ 1.52770052e+00, -4.06178026e-01, -6.68827706e-01],
       [-2.40622584e-01,  2.09027752e-01,  9.65084237e-01],
       [ 5.33495427e-02, -1.01557201e+00,  1.01196278e-01],
       [ 3.21061767e-01, -1.36027010e+00, -4.22885943e-01],
       [ 1.76174284e+00, -4.92037266e-01,  8.17060673e-01],
       [-7.24894626e-01, -2.76229377e-02,  1.31714603e-02],
       [ 7.78457903e-01,  6.38238045e-01,  9.15273858e-02],
       [ 2.05815076e-01, -2.66632148e-01,  1.88387753e+00],
       [ 2.64231953e-01,  1.15832389e+00,  2.26532563e+00],
       [ 6.95631418e-01, -5.39594295e-01,  9.98001097e-01],
       [ 5.20901611e-03,  1.67605884e-01, -3.10121279e-01],
       [-4.86690820e-01,  1.58837080e-01,  1.76161755e+00],
       [-1.28393410e-01, -9.66698314e-01,  1.52392089e+00],
       [ 1.99054853e-01,  4.99465486e-01, -1.26649532e-01],
       [ 1.69095317e-01, -1.16365137e-01,  1.56093432e-01],
       [ 5.40963474e-01, -4.04760517e-01, -1.17300632e+00],
       [-6.23342988e-01, -6.41431114e-01, -5.89821191e-01],
       [-7.46144909e-01,  2.09748480e+00,  3.59289568e-01],
       [ 1.18828141e+00,  1.03933732e+00, -1.08835480e+00],
       [ 1.07235763e+00, -1.08894974e+00, -8.17411404e-01],
       [ 2.28282177e+00, -2.14012983e+00, -1.95161727e+00],
       [ 2.30399629e+00, -3.33963266e-01, -1.74007583e+00],
       [ 3.77107043e-01,  3.03415133e-01, -2.48569863e-04],
       [ 5.83845937e-01,  8.96688880e-01, -1.38344286e+00],
       [-6.43297766e-01,  1.82815146e-01, -7.07444320e-02],
       [-6.44942318e-01,  5.62226001e-02,  1.59326223e+00],
       [ 1.58142604e-01, -5.98076628e-01,  3.50925703e-01],
       [ 7.87191855e-01,  2.44519883e-01,  3.34627928e-01],
       [-4.62568946e-01,  5.61858583e-02,  4.26160826e-01],
       [-1.24175895e+00,  1.14270902e+00,  6.43501138e-01],
       [-1.27078331e+00, -7.77394277e-01, -5.01590110e-01],
       [-5.95147167e-01,  4.58164925e-01, -8.10895500e-01],
       [ 1.20129079e+00,  6.31479587e-01,  7.90284694e-02],
       [ 1.82260684e+00,  3.41520932e-01,  1.09695767e-02],
       [-3.57874442e-01,  1.86543878e-01, -3.07867146e-01],
       [ 2.28635861e+00,  6.27547467e-01,  2.43768706e-01],
       [ 1.87401313e+00, -1.02762363e+00,  4.48656245e-01],
       [ 1.55277728e-01,  1.46570904e+00,  1.49978847e+00],
       [ 1.59697786e+00,  1.27326144e+00,  1.72214220e+00],
       [-4.94098043e-01,  7.65891663e-01,  1.38483239e+00],
       [-8.55773218e-01,  2.11516104e-01, -1.48077429e-01],
       [-1.68096282e+00, -7.98418434e-01, -1.28600564e-01],
       [ 1.23906214e+00,  1.55405186e-01, -8.38119201e-01],
       [ 5.05192708e-01, -1.30201419e+00, -1.01553737e+00],
       [ 1.07911853e+00,  7.53566373e-01, -1.30342006e+00],
       [ 5.34941601e-01,  9.26396527e-01, -9.80253956e-01],
       [ 2.13193880e-01, -5.47782856e-01, -1.40837961e+00],
       [ 1.73835548e+00,  1.48349889e+00, -1.69386908e-01],
       [-3.64878501e-01, -1.13377219e+00,  3.06057686e+00],
       [ 3.31265553e-01, -2.76459947e-01,  6.20691454e-01],
       [ 7.06586297e-01,  5.05363605e-01, -8.70712443e-01],
       [ 1.91259505e+00, -1.55007618e+00, -3.29011773e-02],
       [-6.97869386e-01, -7.07976202e-01,  6.47055690e-01],
       [ 4.67591082e-01, -9.73743085e-01,  1.47914619e+00],
       [ 4.61544375e-01,  3.38377384e-01, -7.58847325e-01],
       [ 3.57767540e-01,  1.86556846e+00,  4.10653145e-01],
       [-1.39733373e+00,  1.52662029e+00, -2.89501854e-01],
       [ 4.96409002e-01, -6.79212134e-01, -1.18496535e+00],
       [ 1.17603902e+00,  4.15317846e-01,  9.31465557e-01],
       [ 1.02295064e+00, -2.07839868e+00, -1.64874055e-01],
       [ 1.78775629e-01, -4.21516104e-01,  9.59940588e-01],
       [ 8.37188307e-01, -1.91520530e+00,  2.13056186e-02],
       [-9.55854507e-01, -7.92576781e-01,  1.68382883e+00],
       [ 1.04934293e+00, -1.04551958e+00, -1.19812922e+00],
       [ 1.08205263e+00, -1.07392283e+00,  2.70257957e-01],
       [-4.33078480e-01, -5.64259381e-01,  4.93378432e-01],
       [-8.11662329e-01,  2.96270024e+00,  1.10053384e+00],
       [ 3.21478885e-01, -4.78456747e-01, -6.44514716e-01],
       [ 2.35266569e+00, -5.12388046e-01,  5.39977829e-01],
       [ 6.10410824e-01, -1.53058903e-01,  1.19443844e+00],
       [-3.32919153e-01, -1.18513374e+00, -5.91412173e-02],
       [-1.74013031e+00, -1.10606806e+00,  1.60470867e-01],
       [-3.22037010e-01, -1.26674763e+00, -1.45596149e+00],
       [-1.67235434e-01,  2.25704458e-01,  3.94298065e-01],
       [-9.71687708e-01,  2.31861277e+00, -4.88055939e-01],
       [ 1.15411635e+00, -1.50741077e-01, -4.13276857e-01],
       [ 2.43179620e+00,  4.98265336e-01,  5.84076874e-01],
       [ 4.97802539e-01,  5.44934882e-01, -8.25978794e-01],
       [-1.70755661e+00, -1.10637638e+00,  4.65602986e-01],
       [ 1.82390697e+00, -1.57702057e+00,  1.85870142e+00],
       [-2.14569393e+00, -1.32245820e-01,  7.25124552e-01],
       [ 5.80505054e-01,  2.08308219e-01,  1.13981865e+00],
       [-1.23107568e-01,  1.10361020e+00, -1.13374963e+00],
       [-2.55022509e-01,  5.50150356e-01, -2.21595234e+00],
       [ 1.68326413e-01,  8.52199464e-02, -1.87243876e-01],
       [ 4.29395573e-02,  2.09543491e-01,  1.63453401e+00],
       [-1.72208556e-02, -1.38552323e+00, -4.81894370e-01],
       [-1.58581830e+00,  1.84483077e+00, -6.46485242e-01],
       [ 3.45780746e-01,  1.47093243e-02, -1.01406667e+00],
       [ 1.23840820e+00, -7.83652689e-01, -1.90301213e-01],
       [-6.53521459e-01, -6.61110519e-01,  9.19331987e-01],
       [ 5.31859512e-01,  8.00786068e-01,  4.35161490e-01],
       [-1.37625166e+00, -1.61640526e+00,  9.99847768e-01],
       [ 4.38880432e-01,  7.48924660e-01,  4.74491722e-01],
       [ 4.47644208e-02,  1.54724305e-01,  4.14819100e-01],
       [ 1.55342612e+00, -2.72707965e-01,  1.10328911e+00],
       [ 6.77379607e-01,  1.01439524e+00, -2.50202225e-01],
       [ 5.33661891e-01, -4.54697012e-02,  1.69431359e+00],
       [-1.14607814e-01, -2.57262706e-01, -3.55062450e-01],
       [-7.14588514e-01,  1.55384725e+00,  4.60910950e-02],
       [ 3.13065029e-01, -1.16656721e+00, -5.26774228e-01]])



l=np.array([[-0.33185271],
       [-1.09202455],
       [-1.25842217],
       [ 1.26853649],
       [ 1.42369942],
       [ 0.76161071],
       [ 0.31263003],
       [ 0.90111484],
       [ 1.64741748],
       [-1.47239379],
       [ 1.0383084 ],
       [-0.83014962],
       [ 0.29660756],
       [ 1.21147903],
       [ 1.21290198],
       [ 0.07044688],
       [-0.0746985 ],
       [ 0.49916343],
       [ 0.36745127],
       [ 0.54421593],
       [ 1.28306758],
       [ 0.14418374],
       [-1.43790338],
       [ 1.68296838],
       [ 0.03808165],
       [ 0.17079509],
       [-0.86795611],
       [-0.18265133],
       [ 1.53544779],
       [ 0.98792484],
       [-0.5737357 ],
       [ 0.45327628],
       [ 0.58250869],
       [-0.94532689],
       [-2.01006412],
       [ 0.99831997],
       [ 0.05436591],
       [ 0.8107193 ],
       [ 0.43204153],
       [ 0.1498573 ],
       [-1.05036854],
       [-0.1310466 ],
       [-0.20698855],
       [-0.7597118 ],
       [-0.50774357],
       [-0.16390238],
       [-1.15248066],
       [ 0.14940285],
       [-0.97334987],
       [ 0.73290538],
       [-0.85148025],
       [-1.22364079],
       [-1.11345698],
       [ 1.42504844],
       [ 0.53707579],
       [ 0.83746581],
       [ 0.62656206],
       [ 0.0180634 ],
       [-1.75527678],
       [ 1.58181475],
       [ 0.48491238],
       [-0.18558639],
       [ 1.34074779],
       [-0.4045621 ],
       [-1.18784965],
       [-0.26245495],
       [ 1.12748309],
       [ 0.08917869],
       [-0.24828117],
       [ 1.16017471],
       [-0.48808099],
       [-1.29644206],
       [ 1.01316063],
       [ 1.50688846],
       [-0.95821242],
       [-0.80985589],
       [-0.83050683],
       [ 0.15217742],
       [ 1.13856506],
       [-0.17912994],
       [ 1.11278829],
       [ 0.13075138],
       [-2.06928674],
       [ 0.66584508],
       [ 0.84219208],
       [-1.67666775],
       [ 0.89503606],
       [-0.2646376 ],
       [ 0.79945699],
       [-0.78005521],
       [-0.90159254],
       [-0.33856719],
       [ 1.19878626],
       [ 0.58562399],
       [-0.78095363],
       [ 0.20808907],
       [ 1.1863509 ],
       [-0.95288061],
       [-0.94387383],
       [-0.10414806],
       [ 0.41925393],
       [ 1.21118697],
       [ 1.28524152],
       [-0.10436498],
       [ 1.09689539],
       [ 0.73495996],
       [-0.58296061],
       [ 1.02931503],
       [-0.77062644],
       [-0.92861987],
       [ 0.51033183],
       [ 0.46321913],
       [-2.18326549],
       [-1.02015699],
       [-0.73070126],
       [-1.22364945],
       [ 0.02013429],
       [ 0.85750126],
       [ 2.100217  ],
       [-0.49754449],
       [-0.76443484],
       [-0.47937806],
       [-0.70179945],
       [ 2.02581902],
       [ 1.18369351],
       [ 2.14072385],
       [ 1.21155928],
       [-0.96152549],
       [-0.18565646],
       [-0.57004885],
       [-0.82089474],
       [-0.54177985],
       [-0.68025061],
       [-0.48800892],
       [-1.31559414],
       [-0.04012461],
       [-1.47172432],
       [-1.02660721],
       [-1.10734024],
       [-0.27229974],
       [ 0.23658457],
       [ 0.29848377],
       [-0.15426361],
       [-0.28666445],
       [ 1.10603064],
       [-0.60391488],
       [-0.40566076],
       [-1.21676772],
       [-0.14005633],
       [ 0.79878226]])

"""


def hit_n_run(x,A,T):
    """
    Returns a random point using the hit and run algorithm from the
    convex body defined by Ax>=0 and ||x||<=1.
    The random walks begins from the point x which is assumed
    to be an internal point (i.e. satisfies the constraints Ax>=0
    and ||x||<=1. The number of steps the algorithms will perform
    is T.

    Inputs:
    x - A starting point for the random walk. Must be internal
       point.

    A - A set of constraints defining the convex body: Ax>=0

    T - Number of steps to perform.

    Outputs:
    x - A random point in the convex body {x: Ax>=0, ||x||<=1}.

    """


    x = np.array([[478.2635],
                    [464.3478],
                      [770.7708],
                       [54.7719]])


    A = np.array([[-2.43819880e+00, 8.64835984e-01, -8.78624514e-02, 1.18932330e-01],
               [-9.76110184e-01, -5.64887681e-01, -2.76434238e-01, -1.48243176e+00],
               [1.68822239e+00, 6.94140818e-01, 8.81213677e-04, -1.80938297e+00]])

    dim = len(x)
    x = x[:]
    u = np.random.randn(T,dim) # at step t the algorithm will pick a random point
                               # on the line through x and x+u(t,:)
    # u = np.arange(1, T * dim + 1).reshape(T, dim, order='F')
    Au = np.matmul(u, A.T)
    nu = np.sum(u**2, 1)
    l = np.random.randn(T, 1)
    # l = np.arange(1, T + 1)

    for t in np.arange(0, T):
        Ax = np.matmul(A, x)
        ratio = -Ax / np.expand_dims(Au[t,:], 1)
        I = np.where(Au[t,:] > 0)
        mn = np.append(ratio[I], -np.inf).max()
        I = np.where(Au[t,:] < 0)
        mx = np.append(ratio[I], np.inf).min()

        pre = np.matmul(nu[t], np.linalg.norm(x) ** 2 - 1) if nu[t].size > 1 else nu[t] * (np.linalg.norm(x) ** 2 - 1)
        disc = np.matmul(x.T, u[t, :].T) ** 2 - pre
        if disc < 0:
            print('negative disc, probably x is not a feasable point.')
            disc = 0

        hl = (-np.matmul(x.T, u[t,:].T) + np.sqrt(disc)) / nu[t]
        ll = (-np.matmul(x.T, u[t,:].T) - np.sqrt(disc)) / nu[t]

        xx = min(hl, mx)
        nn = max(ll, mn)
        m = xx-nn
        x0 = nn + np.matmul(l[t], m) if m.size > 1 else nn + l[t] * m
        x1_pre = np.expand_dims(u[t,:], 1)
        x1 = np.matmul(x1_pre, x0) if x0.size > 1 else x1_pre * x0
        x = x + x1.reshape(x.shape)
        print('step')
    return x




def KQBC(X_train, Y_train, T, kernel, queries=100, **kwargs):
    """
    Runs the kernelized version of the Query By Committee (QBC) algorithm.

    Inputs:
        X_train - Training instances.
        Y_train - Training labels (values +1 and -1).
        T       - Number of random walk steps to make when selecting a
                 random hypothesis.
        kernel  - Type of kernel to be used. Possible values are
                 'Linear', 'Poly' and 'Gauss'.
        parameter1, parameter2 -
                 parameters for the chosen kernel.

    Outputs:
        selection - The instances for which the algorithm queried for
                   label.
        coefs     - The coefficients of the hypotheses used in each of
                   the steps of the algorithm.
        errors    - The training error at each step.
    """

    tol = 1e-10 #tolerance for the factor function

    if kernel == 'Linear':
        K = np.matmul(X_train, X_train.T)
    elif kernel == 'Poly':
        K = (np.matmul(X_train, X_train.T) + kwargs['parameter1']) ** kwargs['parameter2']
    elif kernel == 'Gauss':
        nrm = np.sum(X_train ** 2, 1)
        K = np.exp(-(np.tile(nrm, (1, len(Y_train))) - 2 * np.matmul(X_train, X_train.T) +
                     np.tile(nrm.T, (len(Y_train), 1))) / (2 * kwargs['parameter1'] ** 2))
    else:
        print('Unknown kernel')

    coefs = np.empty((Y_train.shape[0],0))
    errors = []
    q_cnt = 0 # query counter

    samp_num = len(Y_train)

    selection = [0] # initialization: select the first sample point
    selected = 1

    coef = np.zeros((len(Y_train), 1))
    coef[0] = Y_train[0] / np.sqrt(K[0, 0])
    preds = np.matmul(K, coef)
    errate = sum(np.multiply(Y_train.squeeze(), preds.squeeze()) <= 0)

    for ii in np.arange(1, samp_num):
        if q_cnt >= queries:
            break

        extension = selection + [ii]
        (s, u) = schur(K[extension][:, extension])
        s = np.diag(s)
        I = (s > tol)
        A = np.matmul(u[:, I], np.diag(s[I] ** -0.5))

        restri = np.matmul(np.matmul(np.diag(Y_train[selection]), K[selection][:, extension]), A)

        co1 = np.matmul(np.linalg.pinv(A), coef[extension])

        # try:
        co2 = hit_n_run(co1, restri, T)
        co1 = hit_n_run(co2, restri, T)
        # except:
        #     print("Noooo")

        pred1 = np.matmul(K[ii][extension], np.matmul(A, co1))
        pred2 = np.matmul(K[ii][extension], np.matmul(A, co2))

        if (pred1 * pred2 <= 0): # the classifiers disagree
            selection = extension
            q_cnt += 1
        if (Y_train[ii] * pred1 >= 0):
            coef[extension] = np.matmul(A, co1)
        else:
            coef[extension] = np.matmul(A, co2)

        coefs = np.append(coefs, coef)
        errors.append(np.sum(np.multiply(Y_train, np.matmul(K, coef).squeeze()) <= 0) / len(Y_train))
        # print((ii, len(selection), errors))

    return selection, coef, errors